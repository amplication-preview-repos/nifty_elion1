/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AiInteraction as PrismaAiInteraction,
  Story as PrismaStory,
  User as PrismaUser,
} from "@prisma/client";

export class AiInteractionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiInteractionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiInteraction.count(args);
  }

  async aiInteractions(
    args: Prisma.AiInteractionFindManyArgs
  ): Promise<PrismaAiInteraction[]> {
    return this.prisma.aiInteraction.findMany(args);
  }
  async aiInteraction(
    args: Prisma.AiInteractionFindUniqueArgs
  ): Promise<PrismaAiInteraction | null> {
    return this.prisma.aiInteraction.findUnique(args);
  }
  async createAiInteraction(
    args: Prisma.AiInteractionCreateArgs
  ): Promise<PrismaAiInteraction> {
    return this.prisma.aiInteraction.create(args);
  }
  async updateAiInteraction(
    args: Prisma.AiInteractionUpdateArgs
  ): Promise<PrismaAiInteraction> {
    return this.prisma.aiInteraction.update(args);
  }
  async deleteAiInteraction(
    args: Prisma.AiInteractionDeleteArgs
  ): Promise<PrismaAiInteraction> {
    return this.prisma.aiInteraction.delete(args);
  }

  async getStory(parentId: string): Promise<PrismaStory | null> {
    return this.prisma.aiInteraction
      .findUnique({
        where: { id: parentId },
      })
      .story();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.aiInteraction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
