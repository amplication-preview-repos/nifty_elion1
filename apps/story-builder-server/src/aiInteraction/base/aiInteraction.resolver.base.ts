/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AiInteraction } from "./AiInteraction";
import { AiInteractionCountArgs } from "./AiInteractionCountArgs";
import { AiInteractionFindManyArgs } from "./AiInteractionFindManyArgs";
import { AiInteractionFindUniqueArgs } from "./AiInteractionFindUniqueArgs";
import { CreateAiInteractionArgs } from "./CreateAiInteractionArgs";
import { UpdateAiInteractionArgs } from "./UpdateAiInteractionArgs";
import { DeleteAiInteractionArgs } from "./DeleteAiInteractionArgs";
import { Story } from "../../story/base/Story";
import { User } from "../../user/base/User";
import { AiInteractionService } from "../aiInteraction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiInteraction)
export class AiInteractionResolverBase {
  constructor(
    protected readonly service: AiInteractionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiInteraction",
    action: "read",
    possession: "any",
  })
  async _aiInteractionsMeta(
    @graphql.Args() args: AiInteractionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiInteraction])
  @nestAccessControl.UseRoles({
    resource: "AiInteraction",
    action: "read",
    possession: "any",
  })
  async aiInteractions(
    @graphql.Args() args: AiInteractionFindManyArgs
  ): Promise<AiInteraction[]> {
    return this.service.aiInteractions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiInteraction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiInteraction",
    action: "read",
    possession: "own",
  })
  async aiInteraction(
    @graphql.Args() args: AiInteractionFindUniqueArgs
  ): Promise<AiInteraction | null> {
    const result = await this.service.aiInteraction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiInteraction)
  @nestAccessControl.UseRoles({
    resource: "AiInteraction",
    action: "create",
    possession: "any",
  })
  async createAiInteraction(
    @graphql.Args() args: CreateAiInteractionArgs
  ): Promise<AiInteraction> {
    return await this.service.createAiInteraction({
      ...args,
      data: {
        ...args.data,

        story: args.data.story
          ? {
              connect: args.data.story,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiInteraction)
  @nestAccessControl.UseRoles({
    resource: "AiInteraction",
    action: "update",
    possession: "any",
  })
  async updateAiInteraction(
    @graphql.Args() args: UpdateAiInteractionArgs
  ): Promise<AiInteraction | null> {
    try {
      return await this.service.updateAiInteraction({
        ...args,
        data: {
          ...args.data,

          story: args.data.story
            ? {
                connect: args.data.story,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiInteraction)
  @nestAccessControl.UseRoles({
    resource: "AiInteraction",
    action: "delete",
    possession: "any",
  })
  async deleteAiInteraction(
    @graphql.Args() args: DeleteAiInteractionArgs
  ): Promise<AiInteraction | null> {
    try {
      return await this.service.deleteAiInteraction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Story, {
    nullable: true,
    name: "story",
  })
  @nestAccessControl.UseRoles({
    resource: "Story",
    action: "read",
    possession: "any",
  })
  async getStory(
    @graphql.Parent() parent: AiInteraction
  ): Promise<Story | null> {
    const result = await this.service.getStory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: AiInteraction): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
